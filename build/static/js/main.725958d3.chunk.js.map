{"version":3,"sources":["components/Search.js","components/Form.js","components/List.js","components/ErrorMessage.js","services/fakeServer.js","index.js"],"names":["Search","clt","isFindName","useState","searchName","setSearchName","htmlFor","id","onChange","evt","currentTarget","value","name","pnum","Form","handler1","handler2","addSubjH","onSubmit","type","List","dataClt","btnClickHdlr","map","dataUnit","style","display","flexDirection","number","onClick","ErrorMessage","message","className","baseURL","fakeServer","getRecordClt","a","axios","get","res","console","log","data","alert","addRecord","newRecord","post","removeRecord","idRecord","delete","updateRecord","put","App","persons","setPersons","newName","setNewName","newPNum","setNewPNum","errorMsg","setErrorMsg","useEffect","then","recordClt","isSubjExistedHelper","subjName","find","ele","preventDefault","window","confirm","updatingRecord","item","deletingId1","textContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.725958d3.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\n\nconst Search = ({ clt, isFindName }) => {\n  const [searchName, setSearchName] = useState(\"\");\n\n  const searchHandler = (evt) => {\n    setSearchName(evt.currentTarget.value);\n  };\n\n  return (\n    <Fragment>\n      <label htmlFor=\"searchName\">Input person's name here: </label>\n      <input id=\"searchName\" onChange={searchHandler}></input>\n      {isFindName(searchName, clt) && (\n        <p>\n          {isFindName(searchName, clt).name}, phone: {isFindName(searchName, clt).pnum}\n        </p>\n      )}\n      <hr></hr>\n    </Fragment>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Form = ({ handler1, handler2, addSubjH }) => {\n  return (\n    <form onSubmit={addSubjH}>\n      <div>\n        <label htmlFor=\"name\">Name: </label>\n        <input id=\"name\" onChange={handler1} />\n        <br></br>\n        <label htmlFor=\"pnum\">Phonenumber: </label>\n        <input id=\"pnum\" onChange={handler2} />\n      </div>\n      <div>\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { Fragment } from \"react\";\n\n// lazy, should store the id to a var and somehow expose it to the handler for delete\nconst List = ({ dataClt, btnClickHdlr }) => {\n  return (\n    <Fragment>\n      {dataClt.map((dataUnit) => (\n        <div style={{ display: \"flex\", flexDirection: \"row\" }} key={dataUnit.id}>\n          <p>\n            {dataUnit.name}, Phone: {dataUnit.number}\n          </p>\n          <button onClick={btnClickHdlr}>{dataUnit.id}</button>\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default List;\n","import React from \"react\";\n\nconst ErrorMessage = ({ message }) => {\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default ErrorMessage;\n","import axios from \"axios\";\n\nconst paramURL = \"api/persons\";\nconst baseURL = `https://infinite-shore-33852.herokuapp.com/${paramURL}`;\n\n// should have a state to track modifying the db -> make it as deps for useEffects for rerender\n\nconst getRecordClt = async () => {\n  const res = await axios.get(baseURL);\n  console.log(\"This is response promise\", res);\n  try {\n    return res.data;\n  } catch (err) {\n    return alert(\"Sth wrong!\");\n  }\n};\n\nconst addRecord = async (newRecord) => {\n  const res = await axios.post(baseURL, newRecord);\n  return res.data;\n};\n\nconst removeRecord = async (idRecord) => {\n  const res = await axios.delete(`${baseURL}/${idRecord}`);\n  return res.data;\n};\n\nconst updateRecord = async (idRecord, newRecord) => {\n  const res = await axios.put(`${baseURL}/${idRecord}`, newRecord);\n  try {\n    return res.data;\n  } catch (err) {\n    return alert(\"Sth wrong!\");\n  }\n};\n\nconst fakeServer = { getRecordClt, addRecord, removeRecord, updateRecord };\nexport default fakeServer;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport \"./index.css\";\nimport Search from \"./components/Search\";\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport fakeServer from \"./services/fakeServer\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newPNum, setNewPNum] = useState(\"0123456789\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n\n  useEffect(() => {\n    // axios.get(\"http://localhost:3001/persons\").then((response) => {\n    //   console.log(\"day la\", response.data);\n    //   setPersons(response.data);\n    // });\n\n    fakeServer.getRecordClt().then((recordClt) => setPersons(recordClt));\n  }, []);\n\n  // name existed -> return the name -> !truthy -> falsy\n  // name dont existed -> return und -> !falsy -> truthy\n  const isSubjExistedHelper = (subjName, clt) => {\n    return clt.find((ele) => ele.name === subjName);\n  };\n\n  const addNameHandler = (evt) => {\n    setNewName(evt.currentTarget.value);\n  };\n\n  const addPNumHandler = (evt) => {\n    setNewPNum(evt.currentTarget.value);\n  };\n\n  // const updateSubjHandler = () => {\n  //   fakeServer.updateRecord(evt.currentTarget.textContent, { name: newName, number: newPNum });\n  // };\n\n  const addSubjHandler = (evt) => {\n    evt.preventDefault();\n    // dont use tenary here cause logic too long\n    if (isSubjExistedHelper(newName, persons)) {\n      window.confirm(`Name ${newName} already existed! Click OK will change the phone number!`);\n      const updatingRecord = persons.find((item) => item.name === newName);\n      fakeServer.updateRecord(updatingRecord.id, { name: newName, number: newPNum });\n      setNewName(\"\");\n    } else {\n      // setPersons([...persons, { name: newName, number: newPNum }]);\n      fakeServer.addRecord({ name: newName, number: newPNum });\n      setErrorMsg(\"Added successfully\");\n    }\n  };\n\n  const deleteHandler = (evt) => {\n    // pick your poison\n    const deletingId1 = evt.currentTarget.textContent;\n    // const deletingId2 = evt.currentTarget.innerText;\n    // const deletingId3 = evt.currentTarget.innerHTML;\n    console.log(deletingId1);\n    fakeServer.removeRecord(deletingId1);\n    window.confirm(\"The record you clicked is deleted.\");\n    // console.log(deletingId2);\n    // console.log(deletingId3);\n  };\n\n  return (\n    <div>\n      {errorMsg !== \"\" && <ErrorMessage message={errorMsg} />}\n      <h2>Phonebook</h2>\n      <Search clt={persons} isFindName={isSubjExistedHelper} />\n      <Form handler1={addNameHandler} handler2={addPNumHandler} addSubjH={addSubjHandler} />\n      <h2>Numbers</h2>\n      <List dataClt={persons} btnClickHdlr={deleteHandler} />\n    </div>\n  );\n};\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}